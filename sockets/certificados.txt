openssl genpkey -algorithm RSA -out server.key -aes256
openssl req -new -key server.key -out server.csr
openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt

# pass: josefina

-------8<------------
To create server.crt (the SSL certificate) and server.key (the private key), which are commonly used in SSL/TLS setups like with an HTTPS server or an SSL/TLS-based server in C++, you can use the openssl command-line tool. Hereâ€™s how you can generate these files:

Step 1: Generate a Private Key

The private key is the key file that should be kept secure and is used to create the SSL certificate.

openssl genpkey -algorithm RSA -out server.key -aes256 -pass pass:yourpassword

    genpkey -algorithm RSA: Generates an RSA private key.
    -out server.key: Specifies the output file for the private key.
    -aes256: Encrypts the key with AES-256 encryption.
    -pass pass:yourpassword: Sets a password for the key file. (You can remove this option if you don't want to encrypt the key).

Step 2: Create a Certificate Signing Request (CSR)

The CSR is used to request a certificate from a Certificate Authority (CA) or for creating a self-signed certificate.

openssl req -new -key server.key -out server.csr

    -new: Generates a new CSR.
    -key server.key: The private key used to sign the CSR.
    -out server.csr: Specifies the output file for the CSR.

During this process, you will be prompted to enter information such as the country, state, organization name, and Common Name (CN). The CN is typically the domain name (e.g., example.com) that the certificate will be used for.

Step 3: Generate a Self-Signed Certificate

If youâ€™re not using a CA to sign your certificate, you can create a self-signed certificate. This is common for testing or internal use.

openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt

    x509 -req: Creates an X.509 certificate from the CSR.
    -days 365: The certificate will be valid for 365 days.
    -in server.csr: The CSR file created earlier.
    -signkey server.key: The private key used to sign the certificate.
    -out server.crt: Specifies the output file for the certificate.

Result

    server.key: Your private key.
    server.crt: Your SSL certificate.
    server.csr: (Optional) The CSR file, which you can discard after the certificate is created or send to a CA if you need a signed certificate from a trusted authority.
